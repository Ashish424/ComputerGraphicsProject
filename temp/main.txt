#include <iostream>
#include <time.h>
#include <random>
#include <ApplicationLogic/CoastlineAgent.h>

using namespace std;

#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"

/*
 * ::::::NOTE::::::
 * Please change the file output dir
 */
std::string imgOutput = "/Users/tgz/Desktop/CoastLine.jpg";
std::string rawOutput = "/Users/tgz/Desktop/rawOutput.jpg";
int main() {
    //Driver
    srandom(time(NULL));
    Data img; //An array for the image
    cv::Mat im = cv::Mat::zeros(1024,1024,CV_8UC1);
    CoastlineAgent *agent = new CoastlineAgent(1024*2048, &img, 1024, 1024, 0, 1023, 0, 1023);
    std::memset(img.img, 0, sizeof(int)*1024*1024);
    agent->doWork();
    for(int i=0; i<1024; i++){
        for(int j=0; j<1024; j++){
            if(img.img[i][j] > 0){
                im.at<uchar>(i,j) = 255;
            }
            //std::printf("(%d,%d): %d | ",i,j,img.img[i][j]);
        }
    }
    cv::imwrite(rawOutput.c_str(),im);


    /*
     * Here, by commenting gaussianBlur and uncommenting blur
     * will make a smooth but an island with less feature.
     *
     * Uncommenting both will make bigger island.
     */
    cv::GaussianBlur(im, im, cv::Size(121,121),1.5,1.5);
    //cv::blur(im,im,cv::Size(31,31));


    cv::blur(im , im, cv::Size(3,3));
    /*
     * Contrast stretching and equalizeHist are both doing same
     * thing but with different goals, contrast stretching keeps
     * almost all the information provided by the above code
     * where as equalizeHist will change the values of pixel of
     * image to make its histogram equal..
     * Though I prefer contrast stretching as the information
     * is preserved.
     */
    for(int i=0; i<1024; i++){
        for(int j=0; j<1024; j++){
            int a = im.at<uchar>(i, j);
            /*
             * Pixel values are multiplied
             * to the slope to stretch the low
             * value pixels
             */
            int slope = 30;
            a *= slope;
            if( a > 255)a=255;
            im.at<uchar>(i, j) = (uchar)a;
            //std::printf("(%d,%d): %d | ",i,j,img.img[i][j]);
        }
    }
    //cv::GaussianBlur(im, im, cv::Size(3,3),1.5,1.5);
    //cv::equalizeHist(im, im);

    /*
     * median Blur is used to smooth the contour regions without
     * disturbing the edges
     */
    cv::medianBlur(im , im, 31);

    cv::imwrite(imgOutput.c_str(),im);
    cv::imshow("myWindow",im);
    cout << "Hello, World!" << endl;

    return 0;
}